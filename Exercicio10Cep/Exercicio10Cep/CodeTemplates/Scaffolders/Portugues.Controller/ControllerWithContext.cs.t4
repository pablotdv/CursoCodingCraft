<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Threading.Tasks;
using PagedList.EntityFramework;
using Newtonsoft.Json;
using System.Net;
using <#= Model.DefaultNamespace #>.Helpers;
using <#= Model.DefaultNamespace #>.ViewModels;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
<# if(Model.DbContextNamespace != Model.ModelTypeNamespace) { #>
using <#= Model.DbContextNamespace #>;
<# } #>

namespace <#= Model.ControllerNamespace #>
{   
<#  
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var modelVariable = modelName.ToLower(); 
    var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey); 
    var routingName = Regex.Replace(Model.ControllerName, "Controller$", "", RegexOptions.IgnoreCase);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
#>
    public class <#= Model.ControllerName #> : Controller
    {
		private const string _PESQUISA_KEY = "<#=Guid.NewGuid()#>"; 
		
        private <#= ((CodeType)Model.DbContextType).Name #> context = new <#= ((CodeType)Model.DbContextType).Name #>();

        //
        // GET: /<#= routingName #>/
        public async Task<ActionResult> Indice()
        {

			var viewModel = JsonConvert.DeserializeObject<<#= modelName#>ViewModel>(await PesquisaModelStore.GetAsync(Guid.Parse(_PESQUISA_KEY)));

            return await Pesquisa(viewModel ?? new <#= modelName#>ViewModel());

        }

		//
        // GET: /<#= routingName #>/Pesquisa
		public async Task<ActionResult> Pesquisa(<#= modelName#>ViewModel viewModel)
		{
<#
    var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null);
    var includeExpressions = isObjectContext 
        ? String.Join("", propertiesToInclude.Select(x => String.Format(".Include(\"{0}\")", x.Name)))
        : String.Join("", propertiesToInclude.Select(x => String.Format(".Include({0} => {0}.{1})", modelVariable, x.Name)));
#>
			await PesquisaModelStore.AddAsync(Guid.Parse(_PESQUISA_KEY), viewModel);

			var query = context.<#= modelNamePlural #><#= includeExpressions #>.AsQueryable();

			//TODO: parâmetros de pesquisa

            viewModel.Resultados = await query.OrderBy(a=>a.).ToPagedListAsync(viewModel.Pagina, viewModel.TamanhoPagina);

            if (Request.IsAjaxRequest())
                return PartialView("_Pesquisa", viewModel);

            return View("Indice", viewModel);
		}

        //
        // GET: /<#= routingName #>/Detalhes/5

        public async Task<ActionResult> Detalhes(<#= primaryKeyProperty.Type.AsString #> id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= modelName #> <#= modelVariable #> = await context.<#= modelNamePlural #>.FindAsync(id);
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }            
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelationNamePlural #> = new SelectList(await context.<#= relatedEntity.RelatedEntityTypeNamePlural #>.ToListAsync(), "<#= relatedEntity.RelatedEntityPrimaryKeyName #>", _);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // GET: /<#= routingName #>/Criar

        public async Task<ActionResult> Criar()
        {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelationNamePlural #> = new SelectList(await context.<#= relatedEntity.RelatedEntityTypeNamePlural #>.ToListAsync(), "<#= relatedEntity.RelatedEntityPrimaryKeyName #>", _);
<# } #>
            return View();
        } 

        //
        // POST: /<#= routingName #>/Criar

        [HttpPost]
		[ValidateAntiForgeryToken]
        public async Task<ActionResult> Criar(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(primaryKeyProperty.Type.AsString == "System.Guid") { #>
                <#= modelVariable #>.<#= primaryKeyProperty.Name #> = Guid.NewGuid();
<# } #>
<# if(isObjectContext) { #>
                context.<#= modelNamePlural #>.AddObject(<#= modelVariable #>);
<# } else { #>
                context.<#= modelNamePlural #>.Add(<#= modelVariable #>);
<# } #>
                await context.SaveChangesAsync();
                return RedirectToAction("Indice");  
            }

<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelationNamePlural #> = new SelectList(await context.<#= relatedEntity.RelatedEntityTypeNamePlural #>.ToListAsync(), "<#= relatedEntity.RelatedEntityPrimaryKeyName #>", _);
<# } #>
            return View(<#= modelVariable #>);
        }
        
        //
        // GET: /<#= routingName #>/Editar/5
 
        public async Task<ActionResult> Editar(<#= primaryKeyProperty.Type.AsString #> id)
        {
			if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= modelName #> <#= modelVariable #> = await context.<#= modelNamePlural #>.FindAsync(id);
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }            
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelationNamePlural #> = new SelectList(await context.<#= relatedEntity.RelatedEntityTypeNamePlural #>.ToListAsync(), "<#= relatedEntity.RelatedEntityPrimaryKeyName #>", _);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // POST: /<#= routingName #>/Editar/5

        [HttpPost]
		[ValidateAntiForgeryToken]
        public async Task<ActionResult> Editar(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(isObjectContext) { #>
                context.<#= modelNamePlural #>.Attach(<#= modelVariable #>);
                context.ObjectStateManager.ChangeObjectState(<#= modelVariable #>, EntityState.Modified);
<# } else { #>
                context.Entry(<#= modelVariable #>).State = EntityState.Modified;
<# } #>
                await context.SaveChangesAsync();
                return RedirectToAction("Indice");
            }
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelationNamePlural #> = new SelectList(await context.<#= relatedEntity.RelatedEntityTypeNamePlural #>.ToListAsync(), "<#= relatedEntity.RelatedEntityPrimaryKeyName #>", _);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // GET: /<#= routingName #>/Excluir/5
 
        public async Task<ActionResult> Excluir(<#= primaryKeyProperty.Type.AsString #> id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= modelName #> <#= modelVariable #> = await context.<#= modelNamePlural #>.FindAsync(id);
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }        
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { #>
            ViewBag.<#= relatedEntity.RelationNamePlural #> = new SelectList(await context.<#= relatedEntity.RelatedEntityTypeNamePlural #>.ToListAsync(), "<#= relatedEntity.RelatedEntityPrimaryKeyName #>", _);
<# } #>    
            return View(<#= modelVariable #>);
        }

        //
        // POST: /<#= routingName #>/Excluir/5

        [HttpPost, ActionName("Exluir")]
		[ValidateAntiForgeryToken]
        public async Task<ActionResult> ExcluirConfirmacao(<#= primaryKeyProperty.Type.AsString #> id)
        {
            <#= modelName #> <#= modelVariable #> = await context.<#= modelNamePlural #>.FindAsync(id);
<# if(isObjectContext) { #>
            context.<#= modelNamePlural #>.DeleteObject(<#= modelVariable #>);
<# } else { #>
            context.<#= modelNamePlural #>.Remove(<#= modelVariable #>);
<# } #>
            await context.SaveChangesAsync();
            return RedirectToAction("Indice");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing) {
                context.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>